# 函数定义阶段 *****
# 只检测函数体语法，不执行函数体代码
# def 函数名 + 括号 + 冒号
# 缩进 + 体代码
# 制造一个工厂
#def factory():
#    print('正在制造手机')  # 代码相当于员工和机器

# 函数调用阶段 *****
# 函数的调用：函数名加括号
# 函数内存地址
#print(factory)
#factory()

# 函数的三大特性
# 功能，参数，返回值
# 有代码有功能
# 无代码(用来测试，先做好项目需求)
def shopping():
    pass

# 参数
# 无参函数
# 应用场景仅仅只是执行一些操作，比如与用户交互，打印，不需要外接资源
def factory():
    print('正在制造手机') # 代码相对于员工或者机器
factory()

# 有参
# 需要根据外部传进来的参数，才能执行相应的逻辑，计算
# 位置形参
def factory(a, b): # 制造一个工厂，需要a零件和b零件
    # 1 形参：指的是在定义函数阶段括号内指定变量名，即形参本质就是“变量名”
    # 形参可以看做一个变量名
    print('a是%s'%a)
    print('b是%s'%b)
# 实参：指的是调用函数阶段括号内传入的值，即实参本质就是值
# 位置实参
factory(1,2)
# 注意：但凡按照位置定义的形参，必须被位置实参传值，多一个不行，少一个也不行

# 关键字实参 *****
factory(a=1,b=2)
factory(b=1,a=2)
# 注意：
# 可以完全打乱顺序，但仍然能指名道姓为指定的形参传值
# 可以混合使用位置实参与关键字实参，但是必须注意：
  # 位置实参必须放到关键字实参前面
  # 不能对一个形参重复赋值

# 错误示范
#factory(a=1,b=2,a=2)
#factory(a=1,2)
# 混用位置实参和关键字实参的正确方式
factory(1,b=2)

# 默认参数 *****
# 指的是在定义函数阶段，就已经为某个形参赋值了，这个称为默认形参

# def factory(b=2, a)  错误语法，位置形参要在默认形参前面
def factory(a, b=2):
    c = a + b
    print(c)
    # 在定义阶段就已经被赋值，意味着在调用可以不用为其赋值
    # 也可以对其重新赋值
factory(1)
factory(1, 5)

# 位置形参 vs 默认形参
def register(name, age, sex='男'): # 大多数情况下传的值相同，应该定义为默认形参
    print(name,age,sex)

register('dahai', 18)
register('zhuge', 18)
register('xishi', 18, '女')

# 可变长度的参数(不定长参数) *** 0到多
# 1. 在形参中带*：会将调用函数时溢出位置实参保存成元组的形式，然后赋值给*后的变量名
def foo(x,y,*z):
    print(x,y) # z是元组
    print(z)
    print(*z)    # *z是打散的意思
#foo(1,2,3,4,5,6)
foo(1,2,3)

# 实参打散
# 序列类型可以被*打散
foo(1,*(2,3))# 1 2 (3,)
foo(1,2)     # 1 2 ()
foo(*[1,2,3]) # 列表打散
foo(*'abc')   # 字符串打散

# 在形参中带**：会将调用函数时溢出关键字实参保存成字典的形式，然后赋值**后的变量名
def foo(x,y,**z):
    print(x,y)
    print(z)
# ** 只能接受关键字实参
# 错误示范
# foo(1,2,3)
foo(1,2,a=1,b=2,c=3)

# 打散字典
# 实参可以打散字典变成关键字实参进行传参
foo(1,2,**{'a':1,'b':2,'c':3})
# 字典不能独立打散
#dic = {'a':1,'b':2,'c':3}
#print(**dic)

#5 规范：在形参中带*与**的，*后的变量名应该为args，**后的变量名应该是kwargs
def factory(*args,**kwargs):
    print(args)
    print(kwargs)
factory(1,2,3,x=3,y=4)

# 了解
# 命名关键字参数: 放到*与**之间的参数称之为命名关键字参数
def foo(x,y,*args,m,n,**kwargs):
    print(x,y)
    print(args)
    print(m,n)
    print(kwargs)
# 错误示范
#foo(1,2,3,4,5,6,a=1,b=2,c=3)
foo(1,2,3,4,5,6,m=100,n=200,a=1,b=2,c=3)





